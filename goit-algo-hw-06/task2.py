import networkx as nx
from collections import deque


G = nx.Graph()

# Додавання вершин
places = ["Хата", "Ларьок", "Робота", "Парк", "Метро", "ТЦК"]
G.add_nodes_from(places)

# Додавання ребер
edges = [
    ("Хата", "Ларьок"),
    ("Хата", "Метро"),
    ("Хата", "Парк"),
    ("Ларьок", "Метро"),
    ("Ларьок", "Парк"),
    ("Метро", "Робота"),
    ("ТЦК", "Метро"),
    ("ТЦК", "Ларьок"),
    ("ТЦК", "Парк"),
]

G.add_edges_from(edges)

# Реалізація алгоритму DFS (Depth-First Search, пошук в глибину)
def dfs(graph, start, goal):
    stack = [(start, [start])]
    while stack:
        (vertex, path) = stack.pop()
        for next in set(graph.neighbors(vertex)) - set(path):
            if next == goal:
                yield path + [next]
            else:
                stack.append((next, path + [next]))


# Реалізація алгоритму BFS (Breadth-First Search, пошук в ширину)
def bfs(graph, start, goal):
    queue = deque([(start, [start])])
    while queue:
        (vertex, path) = queue.popleft()
        for next in set(graph.neighbors(vertex)) - set(path):
            if next == goal:
                yield path + [next]
            else:
                queue.append((next, path + [next]))


# Знаходження всіх шляхів між "Хата" і "Робота" за допомогою DFS
dfs_paths = list(dfs(G, "Хата", "Робота"))

# Знаходження всіх шляхів між "Хата" і "Робота" за допомогою BFS
bfs_paths = list(bfs(G, "Хата", "Робота"))


# Виведення результатів
print("Шляхи від Хата до Робота за допомогою DFS:")
for path in dfs_paths:
    print(path)

print("\nШляхи від Хата до Робота за допомогою BFS:")
for path in bfs_paths:
    print(path)

""" Результат:

Шляхи від Хата до Робота за допомогою DFS (Depth-First Search, пошук в глибину):
['Хата', 'Метро', 'Робота']
['Хата', 'Ларьок', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Ларьок', 'Метро', 'Робота']
['Хата', 'Ларьок', 'Парк', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Парк', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Парк', 'ТЦК', 'Ларьок', 'Метро', 'Робота']
['Хата', 'Парк', 'Ларьок', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Парк', 'Ларьок', 'Метро', 'Робота']

Шляхи від Хата до Робота за допомогою BFS (Breadth-First Search, пошук в ширину):
['Хата', 'Метро', 'Робота']
['Хата', 'Ларьок', 'Метро', 'Робота']
['Хата', 'Парк', 'Ларьок', 'Метро', 'Робота']
['Хата', 'Парк', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Ларьок', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Парк', 'Ларьок', 'ТЦК', 'Метро', 'Робота']
['Хата', 'Парк', 'ТЦК', 'Ларьок', 'Метро', 'Робота']
['Хата', 'Ларьок', 'Парк', 'ТЦК', 'Метро', 'Робота']
"""