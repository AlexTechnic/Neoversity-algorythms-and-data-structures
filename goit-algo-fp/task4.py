""" 
Це програма для побудови та візуалізації бінарної купи у вигляді бінарного дерева (візуалізація піраміди). 
Бінарна купа - це спеціальний тип бінарного дерева, де кожен вузол має певну властивість.
У мінімальній купі значення кожного батьківського вузла менше або дорівнює значенням його дочірніх вузлів. 
У максимальній купі навпаки, батьківський вузол більший за його дочірні вузли.
"""


import uuid
import networkx as nx
import matplotlib.pyplot as plt
import heapq


#  Клас для представлення вузла бінарної купи
class Node:
    """Клас для представлення вузла бінарної купи.
    Кожен вузол має посилання на лівого і правого дочірніх вузлів,
    значення вузла (key), колір (color), а також унікальний ідентифікатор (id).
    """

    def __init__(self, key, color="skyblue"):
        # Ініціалізуємо ключ вузла (значення), а також встановлюємо колір вузла і його унікальний ідентифікатор.
        self.left = None  # Лівий дочірній вузол
        self.right = None  # Правий дочірній вузол
        self.val = key  # Значення вузла (ключ)
        self.color = color  # Колір вузла для візуалізації
        self.id = str(uuid.uuid4())  # Генерація унікального ідентифікатора для вузла


#  Рекурсивна функція для додавання вузлів і ребер до графа на основі бінарного дерева.
#  Функція обходить дерево в глибину і будує граф для його візуалізації.
def add_edges(graph, node, pos, x=0, y=0, layer=1):
    """Рекурсивна функція для додавання вузлів і ребер до графа на основі бінарного дерева.

    :param graph: Граф, що представляє дерево
    :param node: Поточний вузол дерева
    :param pos: Позиції вузлів для візуалізації
    :param x: Горизонтальна координата поточного вузла
    :param y: Вертикальна координата поточного вузла
    :param layer: Поточний рівень вузла в дереві (корінь має рівень 1)
    :return: Оновлений граф із доданими вузлами та ребрами
    """
    if node is not None:
        # Додаємо вузол до графа, використовуючи його унікальний ідентифікатор
        graph.add_node(node.id, color=node.color, label=node.val)
        if node.left:
            # Додаємо ребро до лівого дочірнього вузла і рекурсивно продовжуємо
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            l = add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            # Додаємо ребро до правого дочірнього вузла і рекурсивно продовжуємо
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            r = add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph


def draw_tree(tree_root):
    """Функція для візуалізації дерева за допомогою бібліотек networkx і matplotlib.
    
    :param tree_root: Кореневий вузол дерева, що буде візуалізовано
    """
    # Створюємо новий граф для представлення дерева
    tree = nx.DiGraph()
    # Встановлюємо початкову позицію для кореневого вузла
    pos = {tree_root.id: (0, 0)}
    # Додаємо всі вузли та ребра до графа
    tree = add_edges(tree, tree_root, pos)

    # Отримуємо кольори та мітки вузлів для їх візуалізації
    colors = [node[1]['color'] for node in tree.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in tree.nodes(data=True)}

    # Відображаємо дерево за допомогою matplotlib
    plt.figure(figsize=(8, 5))
    nx.draw(tree, pos=pos, labels=labels, arrows=False, node_size=2500, node_color=colors)
    plt.show()


def build_heap_tree(heap):
    """Функція для побудови дерева з масиву, що представляє бінарну купу.

    :param heap: Масив, що представляє бінарну купу
    :return: Кореневий вузол побудованого дерева
    """
    # Створюємо список вузлів на основі значень у купі
    nodes = [Node(val) for val in heap]
    # Пов'язуємо вузли між собою у вигляді бінарного дерева
    for i in range(len(nodes) // 2):
        if 2 * i + 1 < len(nodes):
            nodes[i].left = nodes[2 * i + 1]  # Лівий дочірній вузол
        if 2 * i + 2 < len(nodes):
            nodes[i].right = nodes[2 * i + 2]  # Правий дочірній вузол
    return nodes[0] if nodes else None  # Повертаємо кореневий вузол дерева або None, якщо дерево пусте


# Створюємо масив, що представляє бінарну купу
heap = [10, 7, 9, 5, 6, 8, 4]
heapq.heapify(heap)

# Побудова дерева з купи та його візуалізація
heap_tree_root = build_heap_tree(heap)
draw_tree(heap_tree_root)


""" В результаті виконання програми буде побудоване бінарне дерево з бінарної купи, 
та відображено його візуальне представлення (у вигляді піраміди). 
"""
